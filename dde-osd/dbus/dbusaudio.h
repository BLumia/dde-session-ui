/**
 * Copyright (C) 2015 Deepin Technology Co., Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 **/

/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c DBusAudio -p dbusaudio com.deepin.daemon.Audio.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSAUDIO_H_1437014245
#define DBUSAUDIO_H_1437014245

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.daemon.Audio
 */
class DBusAudio: public QDBusAbstractInterface
{
    Q_OBJECT

    Q_SLOT void __propertyChanged__(const QDBusMessage &msg)
    {
        QList<QVariant> arguments = msg.arguments();
        if (3 != arguments.count()) {
            return;
        }
        QString interfaceName = msg.arguments().at(0).toString();
        if (interfaceName != "com.deepin.daemon.Audio") {
            return;
        }
        QVariantMap changedProps = qdbus_cast<QVariantMap>(arguments.at(1).value<QDBusArgument>());
        QStringList keys = changedProps.keys();
        foreach(const QString & prop, keys) {
            const QMetaObject *self = metaObject();
            for (int i = self->propertyOffset(); i < self->propertyCount(); ++i) {
                QMetaProperty p = self->property(i);
                if (p.name() == prop) {
                    Q_EMIT p.notifySignal().invoke(this);
                }
            }
        }
    }
public:
    static inline const char *staticServerPath()
    { return "com.deepin.daemon.Audio"; }
    static inline const char *staticInterfacePath()
    { return "/com/deepin/daemon/Audio"; }
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.Audio"; }

public:
    DBusAudio(QObject *parent = 0);

    ~DBusAudio();

    Q_PROPERTY(QString ActiveSinkPort READ activeSinkPort NOTIFY ActiveSinkPortChanged)
    inline QString activeSinkPort() const
    { return qvariant_cast< QString >(property("ActiveSinkPort")); }

    Q_PROPERTY(QString ActiveSourcePort READ activeSourcePort NOTIFY ActiveSourcePortChanged)
    inline QString activeSourcePort() const
    { return qvariant_cast< QString >(property("ActiveSourcePort")); }

    Q_PROPERTY(QString Cards READ cards NOTIFY CardsChanged)
    inline QString cards() const
    { return qvariant_cast< QString >(property("Cards")); }

    Q_PROPERTY(QString DefaultSink READ defaultSink NOTIFY DefaultSinkChanged)
    inline QString defaultSink() const
    { return qvariant_cast< QString >(property("DefaultSink")); }

    Q_PROPERTY(QString DefaultSource READ defaultSource NOTIFY DefaultSourceChanged)
    inline QString defaultSource() const
    { return qvariant_cast< QString >(property("DefaultSource")); }

    Q_PROPERTY(double MaxUIVolume READ maxUIVolume NOTIFY MaxUIVolumeChanged)
    inline double maxUIVolume() const
    { return qvariant_cast< double >(property("MaxUIVolume")); }

    Q_PROPERTY(QList<QDBusObjectPath> SinkInputs READ sinkInputs NOTIFY SinkInputsChanged)
    inline QList<QDBusObjectPath> sinkInputs() const
    { return qvariant_cast< QList<QDBusObjectPath> >(property("SinkInputs")); }

    Q_PROPERTY(QList<QDBusObjectPath> Sinks READ sinks NOTIFY SinksChanged)
    inline QList<QDBusObjectPath> sinks() const
    { return qvariant_cast< QList<QDBusObjectPath> >(property("Sinks")); }

    Q_PROPERTY(QList<QDBusObjectPath> Sources READ sources NOTIFY SourcesChanged)
    inline QList<QDBusObjectPath> sources() const
    { return qvariant_cast< QList<QDBusObjectPath> >(property("Sources")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusObjectPath> GetDefaultSink()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetDefaultSink"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> GetDefaultSource()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetDefaultSource"), argumentList);
    }

    inline QDBusPendingReply<> Reset()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Reset"), argumentList);
    }

    inline QDBusPendingReply<> SetDefaultSink(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetDefaultSink"), argumentList);
    }

    inline QDBusPendingReply<> SetDefaultSource(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetDefaultSource"), argumentList);
    }

    inline QDBusPendingReply<> SetPort(uint in0, const QString &in1, int in2)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1) << QVariant::fromValue(in2);
        return asyncCallWithArgumentList(QStringLiteral("SetPort"), argumentList);
    }

Q_SIGNALS: // SIGNALS
// begin property changed signals
    void ActiveSinkPortChanged();
    void ActiveSourcePortChanged();
    void CardsChanged();
    void DefaultSinkChanged();
    void DefaultSourceChanged();
    void MaxUIVolumeChanged();
    void SinkInputsChanged();
    void SinksChanged();
    void SourcesChanged();
};

namespace com
{
namespace deepin
{
namespace daemon
{
//      typedef ::DBusAudio Audio;
}
}
}
#endif
